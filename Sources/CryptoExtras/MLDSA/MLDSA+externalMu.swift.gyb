//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftCrypto open source project
//
// Copyright (c) 2025 Apple Inc. and the SwiftCrypto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftCrypto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// MARK: - Generated file, do NOT edit
// any edits of this file WILL be overwritten and thus discarded
// see section `gyb` in `README` for details.

import Crypto
import CryptoBoringWrapper

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
%{
    parameter_sets = ["65", "87", "44"]
}%
% for parameter_set in parameter_sets:

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
extension MLDSA${parameter_set}.PrivateKey {
    /// Generate a signature for the prehashed message representative (a.k.a. "external mu").
    ///
    /// > Note: The message representative should be obtained via calls to ``MLDSA${parameter_set}/PublicKey/prehash(for:context:)``.
    ///
    /// - Parameter mu: The prehashed message representative (a.k.a. "external mu").
    ///
    /// - Returns: The signature of the prehashed message representative.
    public func signature(forPrehashedMessageRepresentative mu: some DataProtocol) throws -> Data {
        #if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
        try BoringSSLMLDSA${parameter_set}.InternalPrivateKey(seedRepresentation: self.seedRepresentation)
            .signature(forPrehashedMessageRepresentative: mu)
        #else
        try self.signature_boring(forPrehashedMessageRepresentative: mu)
        #endif
    }
}

@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
extension MLDSA${parameter_set}.PublicKey {
    /// Generate a prehashed message representative (a.k.a. "external mu") for the given message.
    ///
    /// - Parameter data: The message to prehash.
    ///
    /// - Returns: The prehashed message representative (a.k.a. "external mu").
    public func prehash<D: DataProtocol>(for data: D) throws -> Data {
        #if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
        try BoringSSLMLDSA${parameter_set}.InternalPublicKey(rawRepresentation: self.rawRepresentation)
            .prehash(for: data)
        #else
        try self.prehash_boring(for: data)
        #endif
    }

    /// Generate a prehashed message representative (a.k.a. "external mu") for the given message.
    ///
    /// - Parameters:
    ///   - data: The message to prehash.
    ///   - context: The context of the message.
    ///
    /// - Returns: The prehashed message representative (a.k.a. "external mu").
    public func prehash<D: DataProtocol, C: DataProtocol>(for data: D, context: C) throws -> Data {
        #if CRYPTO_IN_SWIFTPM && !CRYPTO_IN_SWIFTPM_FORCE_BUILD_API
        try BoringSSLMLDSA${parameter_set}.InternalPublicKey(rawRepresentation: self.rawRepresentation)
            .prehash(for: data, context: context)
        #else
        try self.prehash_boring(for: data, context: context)
        #endif
    }
}
% end
